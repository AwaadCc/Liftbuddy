{"ast":null,"code":"import { InjectionToken } from '@angular/core';\nimport LocalForage from 'localforage';\nimport CordovaSQLiteDriver from 'localforage-cordovasqlitedriver';\n/**\n * Storage is an easy way to store key/value pairs and JSON objects.\n * Storage uses a variety of storage engines underneath, picking the best one available\n * depending on the platform.\n *\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\n * the most stable and widely used file-based databases, and avoids some of the\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\n * data in low disk-space situations.\n *\n * When running in the web or as a Progressive Web App, Storage will attempt to use\n * IndexedDB, WebSQL, and localstorage, in that order.\n *\n * @usage\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\n * ```bash\n * ionic cordova plugin add cordova-sqlite-storage\n * ```\n *\n * Next, install the package (comes by default for Ionic apps > Ionic V1):\n * ```bash\n * npm install --save @ionic/storage\n * ```\n *\n * Next, add it to the imports list in your `NgModule` declaration (for example, in `src/app/app.module.ts`):\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [\n *     // ...\n *   ],\n *   imports: [\n *     BrowserModule,\n *     IonicModule.forRoot(MyApp),\n *     IonicStorageModule.forRoot()\n *   ],\n *   bootstrap: [IonicApp],\n *   entryComponents: [\n *     // ...\n *   ],\n *   providers: [\n *     // ...\n *   ]\n * })\n * export class AppModule {}\n *```\n *\n * Finally, inject it into any of your components or pages:\n * ```typescript\n * import { Storage } from '@ionic/storage';\n\n * export class MyApp {\n *   constructor(private storage: Storage) { }\n *\n *   ...\n *\n *   // set a key/value\n *   storage.set('name', 'Max');\n *\n *   // Or to get a key/value pair\n *   storage.get('age').then((val) => {\n *     console.log('Your age is', val);\n *   });\n * }\n * ```\n *\n *\n * ### Configuring Storage\n *\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\n *\n * Note: Any custom configurations will be merged with the default configuration\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [...],\n *   imports: [\n *     IonicStorageModule.forRoot({\n *       name: '__mydb',\n         driverOrder: ['indexeddb', 'sqlite', 'websql']\n *     })\n *   ],\n *   bootstrap: [...],\n *   entryComponents: [...],\n *    providers: [...]\n * })\n * export class AppModule { }\n * ```\n */\n\nvar Storage = function () {\n  /**\n   * Create a new Storage instance using the order of drivers and any additional config\n   * options to pass to LocalForage.\n   *\n   * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\n   * default is that exact ordering.\n   */\n  function Storage(config) {\n    var _this = this;\n\n    this._driver = null;\n    this._dbPromise = new Promise(function (resolve, reject) {\n      var db;\n      var defaultConfig = getDefaultConfig();\n      var actualConfig = Object.assign(defaultConfig, config || {});\n      LocalForage.defineDriver(CordovaSQLiteDriver).then(function () {\n        db = LocalForage.createInstance(actualConfig);\n      }).then(function () {\n        return db.setDriver(_this._getDriverOrder(actualConfig.driverOrder));\n      }).then(function () {\n        _this._driver = db.driver();\n        resolve(db);\n      }).catch(function (reason) {\n        return reject(reason);\n      });\n    });\n  }\n\n  Object.defineProperty(Storage.prototype, \"driver\", {\n    /**\n     * Get the name of the driver being used.\n     * @returns {string | null} Name of the driver\n     */\n    get: function () {\n      return this._driver;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Reflect the readiness of the store.\n   * @returns {Promise<LocalForage>} Returns a promise that resolves when the store is ready\n   */\n\n  Storage.prototype.ready = function () {\n    return this._dbPromise;\n  };\n\n  Storage.prototype._getDriverOrder = function (driverOrder) {\n    return driverOrder.map(function (driver) {\n      switch (driver) {\n        case 'sqlite':\n          return CordovaSQLiteDriver._driver;\n\n        case 'indexeddb':\n          return LocalForage.INDEXEDDB;\n\n        case 'websql':\n          return LocalForage.WEBSQL;\n\n        case 'localstorage':\n          return LocalForage.LOCALSTORAGE;\n      }\n    });\n  };\n  /**\n   * Get the value associated with the given key.\n   * @param {any} key the key to identify this value\n   * @returns {Promise} Returns a promise with the value of the given key\n   */\n\n\n  Storage.prototype.get = function (key) {\n    return this._dbPromise.then(function (db) {\n      return db.getItem(key);\n    });\n  };\n  /**\n   * Set the value for the given key.\n   * @param {any} key the key to identify this value\n   * @param {any} value the value for this key\n   * @returns {Promise} Returns a promise that resolves when the key and value are set\n   */\n\n\n  Storage.prototype.set = function (key, value) {\n    return this._dbPromise.then(function (db) {\n      return db.setItem(key, value);\n    });\n  };\n  /**\n   * Remove any value associated with this key.\n   * @param {any} key the key to identify this value\n   * @returns {Promise} Returns a promise that resolves when the value is removed\n   */\n\n\n  Storage.prototype.remove = function (key) {\n    return this._dbPromise.then(function (db) {\n      return db.removeItem(key);\n    });\n  };\n  /**\n   * Clear the entire key value store. WARNING: HOT!\n   * @returns {Promise} Returns a promise that resolves when the store is cleared\n   */\n\n\n  Storage.prototype.clear = function () {\n    return this._dbPromise.then(function (db) {\n      return db.clear();\n    });\n  };\n  /**\n   * @returns {Promise} Returns a promise that resolves with the number of keys stored.\n   */\n\n\n  Storage.prototype.length = function () {\n    return this._dbPromise.then(function (db) {\n      return db.length();\n    });\n  };\n  /**\n   * @returns {Promise} Returns a promise that resolves with the keys in the store.\n   */\n\n\n  Storage.prototype.keys = function () {\n    return this._dbPromise.then(function (db) {\n      return db.keys();\n    });\n  };\n  /**\n   * Iterate through each key,value pair.\n   * @param {any} iteratorCallback a callback of the form (value, key, iterationNumber)\n   * @returns {Promise} Returns a promise that resolves when the iteration has finished.\n   */\n\n\n  Storage.prototype.forEach = function (iteratorCallback) {\n    return this._dbPromise.then(function (db) {\n      return db.iterate(iteratorCallback);\n    });\n  };\n\n  return Storage;\n}();\n\nexport { Storage };\n/** @hidden */\n\nexport function getDefaultConfig() {\n  return {\n    name: '_ionicstorage',\n    storeName: '_ionickv',\n    driverOrder: ['sqlite', 'indexeddb', 'websql', 'localstorage']\n  };\n}\n;\n/** @hidden */\n\nexport var StorageConfigToken = new InjectionToken('STORAGE_CONFIG_TOKEN');\n/** @hidden */\n\nexport function provideStorage(storageConfig) {\n  var config = !!storageConfig ? storageConfig : getDefaultConfig();\n  return new Storage(config);\n}","map":{"version":3,"names":["InjectionToken","LocalForage","CordovaSQLiteDriver","Storage","config","_this","_driver","_dbPromise","Promise","resolve","reject","db","defaultConfig","getDefaultConfig","actualConfig","Object","assign","defineDriver","then","createInstance","setDriver","_getDriverOrder","driverOrder","driver","catch","reason","defineProperty","prototype","get","enumerable","configurable","ready","map","INDEXEDDB","WEBSQL","LOCALSTORAGE","key","getItem","set","value","setItem","remove","removeItem","clear","length","keys","forEach","iteratorCallback","iterate","name","storeName","StorageConfigToken","provideStorage","storageConfig"],"sources":["/Users/awaadchaudhry/Desktop/Coding/Projects/Liftbuddy/node_modules/@ionic/storage/__ivy_ngcc__/dist/storage.js"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport LocalForage from 'localforage';\nimport CordovaSQLiteDriver from 'localforage-cordovasqlitedriver';\n/**\n * Storage is an easy way to store key/value pairs and JSON objects.\n * Storage uses a variety of storage engines underneath, picking the best one available\n * depending on the platform.\n *\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\n * the most stable and widely used file-based databases, and avoids some of the\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\n * data in low disk-space situations.\n *\n * When running in the web or as a Progressive Web App, Storage will attempt to use\n * IndexedDB, WebSQL, and localstorage, in that order.\n *\n * @usage\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\n * ```bash\n * ionic cordova plugin add cordova-sqlite-storage\n * ```\n *\n * Next, install the package (comes by default for Ionic apps > Ionic V1):\n * ```bash\n * npm install --save @ionic/storage\n * ```\n *\n * Next, add it to the imports list in your `NgModule` declaration (for example, in `src/app/app.module.ts`):\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [\n *     // ...\n *   ],\n *   imports: [\n *     BrowserModule,\n *     IonicModule.forRoot(MyApp),\n *     IonicStorageModule.forRoot()\n *   ],\n *   bootstrap: [IonicApp],\n *   entryComponents: [\n *     // ...\n *   ],\n *   providers: [\n *     // ...\n *   ]\n * })\n * export class AppModule {}\n *```\n *\n * Finally, inject it into any of your components or pages:\n * ```typescript\n * import { Storage } from '@ionic/storage';\n\n * export class MyApp {\n *   constructor(private storage: Storage) { }\n *\n *   ...\n *\n *   // set a key/value\n *   storage.set('name', 'Max');\n *\n *   // Or to get a key/value pair\n *   storage.get('age').then((val) => {\n *     console.log('Your age is', val);\n *   });\n * }\n * ```\n *\n *\n * ### Configuring Storage\n *\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\n *\n * Note: Any custom configurations will be merged with the default configuration\n *\n * ```typescript\n * import { IonicStorageModule } from '@ionic/storage';\n *\n * @NgModule({\n *   declarations: [...],\n *   imports: [\n *     IonicStorageModule.forRoot({\n *       name: '__mydb',\n         driverOrder: ['indexeddb', 'sqlite', 'websql']\n *     })\n *   ],\n *   bootstrap: [...],\n *   entryComponents: [...],\n *    providers: [...]\n * })\n * export class AppModule { }\n * ```\n */\nvar Storage = (function () {\n    /**\n     * Create a new Storage instance using the order of drivers and any additional config\n     * options to pass to LocalForage.\n     *\n     * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\n     * default is that exact ordering.\n     */\n    function Storage(config) {\n        var _this = this;\n        this._driver = null;\n        this._dbPromise = new Promise(function (resolve, reject) {\n            var db;\n            var defaultConfig = getDefaultConfig();\n            var actualConfig = Object.assign(defaultConfig, config || {});\n            LocalForage.defineDriver(CordovaSQLiteDriver).then(function () {\n                db = LocalForage.createInstance(actualConfig);\n            })\n                .then(function () { return db.setDriver(_this._getDriverOrder(actualConfig.driverOrder)); })\n                .then(function () {\n                _this._driver = db.driver();\n                resolve(db);\n            })\n                .catch(function (reason) { return reject(reason); });\n        });\n    }\n    Object.defineProperty(Storage.prototype, \"driver\", {\n        /**\n         * Get the name of the driver being used.\n         * @returns {string | null} Name of the driver\n         */\n        get: function () {\n            return this._driver;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reflect the readiness of the store.\n     * @returns {Promise<LocalForage>} Returns a promise that resolves when the store is ready\n     */\n    Storage.prototype.ready = function () {\n        return this._dbPromise;\n    };\n    Storage.prototype._getDriverOrder = function (driverOrder) {\n        return driverOrder.map(function (driver) {\n            switch (driver) {\n                case 'sqlite':\n                    return CordovaSQLiteDriver._driver;\n                case 'indexeddb':\n                    return LocalForage.INDEXEDDB;\n                case 'websql':\n                    return LocalForage.WEBSQL;\n                case 'localstorage':\n                    return LocalForage.LOCALSTORAGE;\n            }\n        });\n    };\n    /**\n     * Get the value associated with the given key.\n     * @param {any} key the key to identify this value\n     * @returns {Promise} Returns a promise with the value of the given key\n     */\n    Storage.prototype.get = function (key) {\n        return this._dbPromise.then(function (db) { return db.getItem(key); });\n    };\n    /**\n     * Set the value for the given key.\n     * @param {any} key the key to identify this value\n     * @param {any} value the value for this key\n     * @returns {Promise} Returns a promise that resolves when the key and value are set\n     */\n    Storage.prototype.set = function (key, value) {\n        return this._dbPromise.then(function (db) { return db.setItem(key, value); });\n    };\n    /**\n     * Remove any value associated with this key.\n     * @param {any} key the key to identify this value\n     * @returns {Promise} Returns a promise that resolves when the value is removed\n     */\n    Storage.prototype.remove = function (key) {\n        return this._dbPromise.then(function (db) { return db.removeItem(key); });\n    };\n    /**\n     * Clear the entire key value store. WARNING: HOT!\n     * @returns {Promise} Returns a promise that resolves when the store is cleared\n     */\n    Storage.prototype.clear = function () {\n        return this._dbPromise.then(function (db) { return db.clear(); });\n    };\n    /**\n     * @returns {Promise} Returns a promise that resolves with the number of keys stored.\n     */\n    Storage.prototype.length = function () {\n        return this._dbPromise.then(function (db) { return db.length(); });\n    };\n    /**\n     * @returns {Promise} Returns a promise that resolves with the keys in the store.\n     */\n    Storage.prototype.keys = function () {\n        return this._dbPromise.then(function (db) { return db.keys(); });\n    };\n    /**\n     * Iterate through each key,value pair.\n     * @param {any} iteratorCallback a callback of the form (value, key, iterationNumber)\n     * @returns {Promise} Returns a promise that resolves when the iteration has finished.\n     */\n    Storage.prototype.forEach = function (iteratorCallback) {\n        return this._dbPromise.then(function (db) { return db.iterate(iteratorCallback); });\n    };\n    return Storage;\n}());\nexport { Storage };\n/** @hidden */\nexport function getDefaultConfig() {\n    return {\n        name: '_ionicstorage',\n        storeName: '_ionickv',\n        driverOrder: ['sqlite', 'indexeddb', 'websql', 'localstorage']\n    };\n}\n;\n/** @hidden */\nexport var StorageConfigToken = new InjectionToken('STORAGE_CONFIG_TOKEN');\n/** @hidden */\nexport function provideStorage(storageConfig) {\n    var config = !!storageConfig ? storageConfig : getDefaultConfig();\n    return new Storage(config);\n}\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,eAA/B;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAI,YAAY;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,OAAT,CAAiBC,MAAjB,EAAyB;IACrB,IAAIC,KAAK,GAAG,IAAZ;;IACA,KAAKC,OAAL,GAAe,IAAf;IACA,KAAKC,UAAL,GAAkB,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;MACrD,IAAIC,EAAJ;MACA,IAAIC,aAAa,GAAGC,gBAAgB,EAApC;MACA,IAAIC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAcJ,aAAd,EAA6BR,MAAM,IAAI,EAAvC,CAAnB;MACAH,WAAW,CAACgB,YAAZ,CAAyBf,mBAAzB,EAA8CgB,IAA9C,CAAmD,YAAY;QAC3DP,EAAE,GAAGV,WAAW,CAACkB,cAAZ,CAA2BL,YAA3B,CAAL;MACH,CAFD,EAGKI,IAHL,CAGU,YAAY;QAAE,OAAOP,EAAE,CAACS,SAAH,CAAaf,KAAK,CAACgB,eAAN,CAAsBP,YAAY,CAACQ,WAAnC,CAAb,CAAP;MAAuE,CAH/F,EAIKJ,IAJL,CAIU,YAAY;QAClBb,KAAK,CAACC,OAAN,GAAgBK,E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"},"metadata":{},"sourceType":"module"}